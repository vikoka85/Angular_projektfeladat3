{"ast":null,"code":"import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Directive, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.action());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) {}\n\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\n\nclass MatSnackBarConfig {\n  constructor() {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n\n    this.announcementMessage = '';\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n\n    this.duration = 0;\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** The horizontal position to place the snack bar. */\n\n    this.horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n\n    this.verticalPosition = 'bottom';\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\n\n\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\n\nclass MatSnackBarRef {\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n\n\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n\n\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n\n      this._onAction.next();\n\n      this._onAction.complete();\n\n      this.dismiss();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n\n\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n\n\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n\n\n  _finishDismiss() {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n\n    this._afterDismissed.complete();\n\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n\n\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n\n\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n\n\n  onAction() {\n    return this._onAction;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nclass SimpleSnackBar {\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /** Performs the action on the snack bar. */\n\n\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /** If the action button should be shown. */\n\n\n  get hasAction() {\n    return !!this.data.action;\n  }\n\n}\n\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(i0.ɵɵdirectiveInject(MatSnackBarRef), i0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\n\nSimpleSnackBar.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[1, \"mat-simple-snack-bar-content\"], [\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.data.message);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatButton],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-simple-snackbar'\n      },\n      template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\n\n\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\n\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n  constructor(_ngZone, _elementRef, _changeDetectorRef, _platform,\n  /** The snack bar configuration. */\n  snackBarConfig) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._platform = _platform;\n    this.snackBarConfig = snackBarConfig;\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n\n    this._announceDelay = 150;\n    /** Whether the component has been destroyed. */\n\n    this._destroyed = false;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n\n    this._onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n\n    this._onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n\n    this._onEnter = new Subject();\n    /** The state of the snack bar animations. */\n\n    this._animationState = 'void';\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    this.attachDomPortal = portal => {\n      this._assertNotAttached();\n\n      const result = this._portalOutlet.attachDomPortal(portal);\n\n      this._afterPortalAttached();\n\n      return result;\n    }; // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n\n\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    } // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n\n\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n  }\n  /** Attach a component portal as content to this snack bar container. */\n\n\n  attachComponentPortal(portal) {\n    this._assertNotAttached();\n\n    const result = this._portalOutlet.attachComponentPortal(portal);\n\n    this._afterPortalAttached();\n\n    return result;\n  }\n  /** Attach a template portal as content to this snack bar container. */\n\n\n  attachTemplatePortal(portal) {\n    this._assertNotAttached();\n\n    const result = this._portalOutlet.attachTemplatePortal(portal);\n\n    this._afterPortalAttached();\n\n    return result;\n  }\n  /** Handle end of animations, updating the state of the snackbar. */\n\n\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n\n    if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /** Begin animation of snack bar entrance into view. */\n\n\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n\n      this._changeDetectorRef.detectChanges();\n\n      this._screenReaderAnnounce();\n    }\n  }\n  /** Begin animation of the snack bar exiting from view. */\n\n\n  exit() {\n    // It's common for snack bars to be opened by random outside calls like HTTP requests or\n    // errors. Run inside the NgZone to ensure that it functions correctly.\n    this._ngZone.run(() => {\n      // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n      // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n      // `MatSnackBar.open`).\n      this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n      // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n      // test harness.\n\n      this._elementRef.nativeElement.setAttribute('mat-exit', ''); // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n      // long enough to visually read it either, so clear the timeout for announcing.\n\n\n      clearTimeout(this._announceTimeoutId);\n    });\n\n    return this._onExit;\n  }\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n\n\n  ngOnDestroy() {\n    this._destroyed = true;\n\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n\n\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._onExit.next();\n\n        this._onExit.complete();\n      });\n    });\n  }\n  /**\n   * Called after the portal contents have been attached. Can be\n   * used to modify the DOM once it's guaranteed to be in place.\n   */\n\n\n  _afterPortalAttached() {\n    const element = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n  }\n  /** Asserts that no content is already attached to the container. */\n\n\n  _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n\n\n  _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement = null;\n\n            if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n              focusedElement = document.activeElement;\n            }\n\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement?.focus();\n\n            this._onAnnounce.next();\n\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n\n}\n\n_MatSnackBarContainerBase.ɵfac = function _MatSnackBarContainerBase_Factory(t) {\n  return new (t || _MatSnackBarContainerBase)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\n\n_MatSnackBarContainerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatSnackBarContainerBase,\n  viewQuery: function _MatSnackBarContainerBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSnackBarContainerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n\n\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n  _afterPortalAttached() {\n    super._afterPortalAttached();\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n    }\n  }\n\n}\n\nMatSnackBarContainer.ɵfac = /* @__PURE__ */function () {\n  let ɵMatSnackBarContainer_BaseFactory;\n  return function MatSnackBarContainer_Factory(t) {\n    return (ɵMatSnackBarContainer_BaseFactory || (ɵMatSnackBarContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatSnackBarContainer)))(t || MatSnackBarContainer);\n  };\n}();\n\nMatSnackBarContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  hostAttrs: [1, \"mat-snack-bar-container\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"div\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    }\n  },\n  dependencies: [i3$1.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSnackBarModule {}\n\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\n\nMatSnackBarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to specify default snack bar. */\n\n\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n\nclass _MatSnackBarBase {\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n\n    this._snackBarRefAtThisLevel = null;\n  }\n  /** Reference to the currently opened snackbar at *any* level. */\n\n\n  get _openedSnackBarRef() {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n\n\n  openFromComponent(component, config) {\n    return this._attach(component, config);\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n\n\n  openFromTemplate(template, config) {\n    return this._attach(template, config);\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n\n\n  open(message, action = '', config) {\n    const _config = { ...this._defaultConfig,\n      ...config\n    }; // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n\n    _config.data = {\n      message,\n      action\n    }; // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n\n\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n\n\n  _attachSnackBarContainer(overlayRef, config) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarConfig,\n        useValue: config\n      }]\n    });\n    const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n    const containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n\n\n  _attach(content, userConfig) {\n    const config = { ...new MatSnackBarConfig(),\n      ...this._defaultConfig,\n      ...userConfig\n    };\n\n    const overlayRef = this._createOverlay(config);\n\n    const container = this._attachSnackBarContainer(overlayRef, config);\n\n    const snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null, {\n        $implicit: config.data,\n        snackBarRef\n      });\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal(portal); // We can't pass this via the injector, because the injector is created earlier.\n\n      snackBarRef.instance = contentRef.instance;\n    } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n\n\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n      overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n    });\n\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage, config.politeness);\n      });\n    }\n\n    this._animateSnackBar(snackBarRef, config);\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /** Animates the old snack bar out and the new one in. */\n\n\n  _animateSnackBar(snackBarRef, config) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n    }\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n\n\n  _createOverlay(config) {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n    const isRtl = config.direction === 'rtl';\n    const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    } // Set horizontal position.\n\n\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n\n\n  _createInjector(config, snackBarRef) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarRef,\n        useValue: snackBarRef\n      }, {\n        provide: MAT_SNACK_BAR_DATA,\n        useValue: config.data\n      }]\n    });\n  }\n\n}\n\n_MatSnackBarBase.ɵfac = function _MatSnackBarBase_Factory(t) {\n  return new (t || _MatSnackBarBase)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(_MatSnackBarBase, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\n_MatSnackBarBase.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _MatSnackBarBase,\n  factory: _MatSnackBarBase.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSnackBarBase, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i2$1.LiveAnnouncer\n    }, {\n      type: i0.Injector\n    }, {\n      type: i3$2.BreakpointObserver\n    }, {\n      type: _MatSnackBarBase,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nclass MatSnackBar extends _MatSnackBarBase {\n  constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n    super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n    this.simpleSnackBarComponent = SimpleSnackBar;\n    this.snackBarContainerComponent = MatSnackBarContainer;\n    this.handsetCssClass = 'mat-snack-bar-handset';\n  }\n\n}\n\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\nMatSnackBar.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatSnackBar,\n  factory: MatSnackBar.ɵfac,\n  providedIn: MatSnackBarModule\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i2$1.LiveAnnouncer\n    }, {\n      type: i0.Injector\n    }, {\n      type: i3$2.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };","map":{"version":3,"sources":["D:/HTML/_Angular/projektfeladat/4/projektfeladat - webshop/node_modules/@angular/material/fesm2020/snack-bar.mjs"],"names":["i1$1","OverlayModule","OverlayConfig","i3$1","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","i2","CommonModule","i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","Directive","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","MatCommonModule","i3","MatButtonModule","Subject","i1","take","takeUntil","trigger","state","style","transition","animate","i2$1","i3$2","Breakpoints","MAT_SNACK_BAR_DATA","MatSnackBarConfig","constructor","politeness","announcementMessage","duration","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","subscribe","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵfac","ɵcmp","NgIf","MatButton","type","args","selector","encapsulation","None","changeDetection","OnPush","host","template","styles","undefined","decorators","matSnackBarAnimations","snackBarState","transform","opacity","_MatSnackBarContainerBase","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","result","_portalOutlet","_afterPortalAttached","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","ngDevMode","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","NgZone","ElementRef","ChangeDetectorRef","Platform","ɵdir","static","MatSnackBarContainer","Default","animations","MatSnackBarModule","ɵmod","ɵinj","imports","exports","declarations","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","_MatSnackBarBase","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","toggle","handsetCssClass","matches","announce","_animateSnackBar","clear","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","Overlay","LiveAnnouncer","BreakpointObserver","ɵprov","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,sBAAtB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,sBAA7C;AACA,OAAO,KAAKC,IAAZ,MAAsB,qBAAtB;AACA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,YAA5C,EAA0DC,eAA1D,EAA2EC,cAA3E,QAAiG,qBAAjG;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,iBAApC,EAAuDC,uBAAvD,EAAgFC,MAAhF,EAAwFC,SAAxF,EAAmGC,SAAnG,EAA8GC,QAA9G,EAAwHC,QAAxH,EAAkIC,WAAlI,EAA+IC,UAA/I,EAA2JC,QAA3J,EAAqKC,QAArK,QAAqL,eAArL;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,0BAApB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,gBAAhC;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4CC,OAA5C,QAA2D,qBAA3D;AACA,OAAO,KAAKC,IAAZ,MAAsB,mBAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,qBAAtB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;gBA0IsG5B,E;;AAAAA,IAAAA,EAC4L,4C;AAD5LA,IAAAA,EACkR;AADlRA,MAAAA,EACkR;AAAA,qBADlRA,EACkR;AAAA,aADlRA,EAC4R,6BAAV;AAAA,M;AADlRA,IAAAA,EACuS,U;AADvSA,IAAAA,EACsT,iB;;;;mBADtTA,E;AAAAA,IAAAA,EACuS,a;AADvSA,IAAAA,EACuS,sC;;;;;;AA1I7Y,MAAM6B,kBAAkB,GAAG,IAAI5B,cAAJ,CAAmB,iBAAnB,CAA3B;AACA;AACA;AACA;;AACA,MAAM6B,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,UAAL,GAAkB,WAAlB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,mBAAL,GAA2B,EAA3B;AACA;;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA;;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA;;AACA,SAAKC,kBAAL,GAA0B,QAA1B;AACA;;AACA,SAAKC,gBAAL,GAAwB,QAAxB;AACH;;AAjBmB;AAoBxB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAtC;AACA;AACA;AACA;;AACA,MAAMC,cAAN,CAAqB;AACjBV,EAAAA,WAAW,CAACW,iBAAD,EAAoBC,WAApB,EAAiC;AACxC,SAAKA,WAAL,GAAmBA,WAAnB;AACA;;AACA,SAAKC,eAAL,GAAuB,IAAI3B,OAAJ,EAAvB;AACA;;AACA,SAAK4B,YAAL,GAAoB,IAAI5B,OAAJ,EAApB;AACA;;AACA,SAAK6B,SAAL,GAAiB,IAAI7B,OAAJ,EAAjB;AACA;;AACA,SAAK8B,kBAAL,GAA0B,KAA1B;AACA,SAAKL,iBAAL,GAAyBA,iBAAzB;;AACAA,IAAAA,iBAAiB,CAACM,OAAlB,CAA0BC,SAA1B,CAAoC,MAAM,KAAKC,cAAL,EAA1C;AACH;AACD;;;AACAC,EAAAA,OAAO,GAAG;AACN,QAAI,CAAC,KAAKP,eAAL,CAAqBQ,MAA1B,EAAkC;AAC9B,WAAKV,iBAAL,CAAuBW,IAAvB;AACH;;AACDC,IAAAA,YAAY,CAAC,KAAKC,kBAAN,CAAZ;AACH;AACD;;;AACAC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,CAAC,KAAKV,SAAL,CAAeM,MAApB,EAA4B;AACxB,WAAKL,kBAAL,GAA0B,IAA1B;;AACA,WAAKD,SAAL,CAAeW,IAAf;;AACA,WAAKX,SAAL,CAAeY,QAAf;;AACA,WAAKP,OAAL;AACH;;AACDG,IAAAA,YAAY,CAAC,KAAKC,kBAAN,CAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,eAAe,GAAG;AACd,SAAKH,iBAAL;AACH;AACD;;;AACAI,EAAAA,aAAa,CAAC1B,QAAD,EAAW;AACpB;AACA;AACA,SAAKqB,kBAAL,GAA0BM,UAAU,CAAC,MAAM,KAAKV,OAAL,EAAP,EAAuBZ,IAAI,CAACuB,GAAL,CAAS5B,QAAT,EAAmBI,WAAnB,CAAvB,CAApC;AACH;AACD;;;AACAyB,EAAAA,KAAK,GAAG;AACJ,QAAI,CAAC,KAAKlB,YAAL,CAAkBO,MAAvB,EAA+B;AAC3B,WAAKP,YAAL,CAAkBY,IAAlB;;AACA,WAAKZ,YAAL,CAAkBa,QAAlB;AACH;AACJ;AACD;;;AACAR,EAAAA,cAAc,GAAG;AACb,SAAKP,WAAL,CAAiBqB,OAAjB;;AACA,QAAI,CAAC,KAAKlB,SAAL,CAAeM,MAApB,EAA4B;AACxB,WAAKN,SAAL,CAAeY,QAAf;AACH;;AACD,SAAKd,eAAL,CAAqBa,IAArB,CAA0B;AAAEQ,MAAAA,iBAAiB,EAAE,KAAKlB;AAA1B,KAA1B;;AACA,SAAKH,eAAL,CAAqBc,QAArB;;AACA,SAAKX,kBAAL,GAA0B,KAA1B;AACH;AACD;;;AACAmB,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKtB,eAAZ;AACH;AACD;;;AACAuB,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKzB,iBAAL,CAAuB0B,QAA9B;AACH;AACD;;;AACAC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKvB,SAAZ;AACH;;AAzEgB;AA4ErB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMwB,cAAN,CAAqB;AACjBvC,EAAAA,WAAW,CAACwC,WAAD,EAAcpC,IAAd,EAAoB;AAC3B,SAAKoC,WAAL,GAAmBA,WAAnB;AACA,SAAKpC,IAAL,GAAYA,IAAZ;AACH;AACD;;;AACAqC,EAAAA,MAAM,GAAG;AACL,SAAKD,WAAL,CAAiBf,iBAAjB;AACH;AACD;;;AACa,MAATiB,SAAS,GAAG;AACZ,WAAO,CAAC,CAAC,KAAKtC,IAAL,CAAUqC,MAAnB;AACH;;AAZgB;;AAcrBF,cAAc,CAACI,IAAf;AAAA,mBAAgHJ,cAAhH,EAAsGtE,EAAtG,mBAAgJyC,cAAhJ,GAAsGzC,EAAtG,mBAA2K6B,kBAA3K;AAAA;;AACAyC,cAAc,CAACK,IAAf,kBADsG3E,EACtG;AAAA,QAAoGsE,cAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADsGtE,MAAAA,EACsH,6BAA5N;AADsGA,MAAAA,EACmK,UAAzQ;AADsGA,MAAAA,EACmL,eAAzR;AADsGA,MAAAA,EAC4L,6DAAlS;AAAA;;AAAA;AADsGA,MAAAA,EACmK,aAAzQ;AADsGA,MAAAA,EACmK,oCAAzQ;AADsGA,MAAAA,EACwO,aAA9U;AADsGA,MAAAA,EACwO,kCAA9U;AAAA;AAAA;AAAA,iBAAw2BF,EAAE,CAAC8E,IAA32B,EAA48B7D,EAAE,CAAC8D,SAA/8B;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAFsG7E,EAEtG,mBAAgGsE,cAAhG,EAA4H,CAAC;AACjHQ,IAAAA,IAAI,EAAE5E,SAD2G;AAEjH6E,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,kBAAZ;AAAgCC,MAAAA,aAAa,EAAE9E,iBAAiB,CAAC+E,IAAjE;AAAuEC,MAAAA,eAAe,EAAE/E,uBAAuB,CAACgF,MAAhH;AAAwHC,MAAAA,IAAI,EAAE;AACzH,iBAAS;AADgH,OAA9H;AAEIC,MAAAA,QAAQ,EAAE,qNAFd;AAEqOC,MAAAA,MAAM,EAAE,CAAC,gYAAD;AAF7O,KAAD;AAF2G,GAAD,CAA5H,EAK4B,YAAY;AAAE,WAAO,CAAC;AAAET,MAAAA,IAAI,EAAErC;AAAR,KAAD,EAA2B;AAAEqC,MAAAA,IAAI,EAAEU,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AACxFX,QAAAA,IAAI,EAAEzE,MADkF;AAExF0E,QAAAA,IAAI,EAAE,CAAClD,kBAAD;AAFkF,OAAD;AAA/B,KAA3B,CAAP;AAGlB,GARxB;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAM6D,qBAAqB,GAAG;AAC1B;AACAC,EAAAA,aAAa,EAAEtE,OAAO,CAAC,OAAD,EAAU,CAC5BC,KAAK,CAAC,cAAD,EAAiBC,KAAK,CAAC;AACxBqE,IAAAA,SAAS,EAAE,YADa;AAExBC,IAAAA,OAAO,EAAE;AAFe,GAAD,CAAtB,CADuB,EAK5BvE,KAAK,CAAC,SAAD,EAAYC,KAAK,CAAC;AACnBqE,IAAAA,SAAS,EAAE,UADQ;AAEnBC,IAAAA,OAAO,EAAE;AAFU,GAAD,CAAjB,CALuB,EAS5BrE,UAAU,CAAC,cAAD,EAAiBC,OAAO,CAAC,kCAAD,CAAxB,CATkB,EAU5BD,UAAU,CAAC,wBAAD,EAA2BC,OAAO,CAAC,mCAAD,EAAsCF,KAAK,CAAC;AACpFsE,IAAAA,OAAO,EAAE;AAD2E,GAAD,CAA3C,CAAlC,CAVkB,CAAV;AAFI,CAA9B;AAkBA;AACA;AACA;AACA;;AACA,MAAMC,yBAAN,SAAwCrG,gBAAxC,CAAyD;AACrDsC,EAAAA,WAAW,CAACgE,OAAD,EAAUC,WAAV,EAAuBC,kBAAvB,EAA2CC,SAA3C;AACX;AACAC,EAAAA,cAFW,EAEK;AACZ;AACA,SAAKJ,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA;;AACA,SAAKC,cAAL,GAAsB,GAAtB;AACA;;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA;;AACA,SAAKC,WAAL,GAAmB,IAAIrF,OAAJ,EAAnB;AACA;;AACA,SAAK+B,OAAL,GAAe,IAAI/B,OAAJ,EAAf;AACA;;AACA,SAAKmD,QAAL,GAAgB,IAAInD,OAAJ,EAAhB;AACA;;AACA,SAAKsF,eAAL,GAAuB,MAAvB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,eAAL,GAAwBC,MAAD,IAAY;AAC/B,WAAKC,kBAAL;;AACA,YAAMC,MAAM,GAAG,KAAKC,aAAL,CAAmBJ,eAAnB,CAAmCC,MAAnC,CAAf;;AACA,WAAKI,oBAAL;;AACA,aAAOF,MAAP;AACH,KALD,CAxBY,CA8BZ;AACA;;;AACA,QAAIR,cAAc,CAACnE,UAAf,KAA8B,WAA9B,IAA6C,CAACmE,cAAc,CAAClE,mBAAjE,EAAsF;AAClF,WAAK6E,KAAL,GAAa,WAAb;AACH,KAFD,MAGK,IAAIX,cAAc,CAACnE,UAAf,KAA8B,KAAlC,EAAyC;AAC1C,WAAK8E,KAAL,GAAa,KAAb;AACH,KAFI,MAGA;AACD,WAAKA,KAAL,GAAa,QAAb;AACH,KAxCW,CAyCZ;AACA;;;AACA,QAAI,KAAKZ,SAAL,CAAea,OAAnB,EAA4B;AACxB,UAAI,KAAKD,KAAL,KAAe,QAAnB,EAA6B;AACzB,aAAKE,KAAL,GAAa,QAAb;AACH;;AACD,UAAI,KAAKF,KAAL,KAAe,WAAnB,EAAgC;AAC5B,aAAKE,KAAL,GAAa,OAAb;AACH;AACJ;AACJ;AACD;;;AACAC,EAAAA,qBAAqB,CAACR,MAAD,EAAS;AAC1B,SAAKC,kBAAL;;AACA,UAAMC,MAAM,GAAG,KAAKC,aAAL,CAAmBK,qBAAnB,CAAyCR,MAAzC,CAAf;;AACA,SAAKI,oBAAL;;AACA,WAAOF,MAAP;AACH;AACD;;;AACAO,EAAAA,oBAAoB,CAACT,MAAD,EAAS;AACzB,SAAKC,kBAAL;;AACA,UAAMC,MAAM,GAAG,KAAKC,aAAL,CAAmBM,oBAAnB,CAAwCT,MAAxC,CAAf;;AACA,SAAKI,oBAAL;;AACA,WAAOF,MAAP;AACH;AACD;;;AACAQ,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBF,KAA/B;;AACA,QAAKE,OAAO,KAAK,MAAZ,IAAsBD,SAAS,KAAK,MAArC,IAAgDC,OAAO,KAAK,QAAhE,EAA0E;AACtE,WAAKC,aAAL;AACH;;AACD,QAAID,OAAO,KAAK,SAAhB,EAA2B;AACvB;AACA;AACA,YAAME,OAAO,GAAG,KAAKpD,QAArB;;AACA,WAAK2B,OAAL,CAAa0B,GAAb,CAAiB,MAAM;AACnBD,QAAAA,OAAO,CAAC/D,IAAR;AACA+D,QAAAA,OAAO,CAAC9D,QAAR;AACH,OAHD;AAIH;AACJ;AACD;;;AACAgE,EAAAA,KAAK,GAAG;AACJ,QAAI,CAAC,KAAKrB,UAAV,EAAsB;AAClB,WAAKE,eAAL,GAAuB,SAAvB;;AACA,WAAKN,kBAAL,CAAwB0B,aAAxB;;AACA,WAAKC,qBAAL;AACH;AACJ;AACD;;;AACAvE,EAAAA,IAAI,GAAG;AACH;AACA;AACA,SAAK0C,OAAL,CAAa0B,GAAb,CAAiB,MAAM;AACnB;AACA;AACA;AACA,WAAKlB,eAAL,GAAuB,QAAvB,CAJmB,CAKnB;AACA;AACA;;AACA,WAAKP,WAAL,CAAiB6B,aAAjB,CAA+BC,YAA/B,CAA4C,UAA5C,EAAwD,EAAxD,EARmB,CASnB;AACA;;;AACAxE,MAAAA,YAAY,CAAC,KAAKyE,kBAAN,CAAZ;AACH,KAZD;;AAaA,WAAO,KAAK/E,OAAZ;AACH;AACD;;;AACAgF,EAAAA,WAAW,GAAG;AACV,SAAK3B,UAAL,GAAkB,IAAlB;;AACA,SAAKkB,aAAL;AACH;AACD;AACJ;AACA;AACA;;;AACIA,EAAAA,aAAa,GAAG;AACZ,SAAKxB,OAAL,CAAakC,gBAAb,CAA8BC,IAA9B,CAAmC/G,IAAI,CAAC,CAAD,CAAvC,EAA4C8B,SAA5C,CAAsD,MAAM;AACxD,WAAK8C,OAAL,CAAa0B,GAAb,CAAiB,MAAM;AACnB,aAAKzE,OAAL,CAAaS,IAAb;;AACA,aAAKT,OAAL,CAAaU,QAAb;AACH,OAHD;AAIH,KALD;AAMH;AACD;AACJ;AACA;AACA;;;AACImD,EAAAA,oBAAoB,GAAG;AACnB,UAAMsB,OAAO,GAAG,KAAKnC,WAAL,CAAiB6B,aAAjC;AACA,UAAMO,YAAY,GAAG,KAAKjC,cAAL,CAAoBkC,UAAzC;;AACA,QAAID,YAAJ,EAAkB;AACd,UAAIE,KAAK,CAACC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;AAC7B;AACAA,QAAAA,YAAY,CAACI,OAAb,CAAqBC,QAAQ,IAAIN,OAAO,CAACO,SAAR,CAAkBC,GAAlB,CAAsBF,QAAtB,CAAjC;AACH,OAHD,MAIK;AACDN,QAAAA,OAAO,CAACO,SAAR,CAAkBC,GAAlB,CAAsBP,YAAtB;AACH;AACJ;AACJ;AACD;;;AACA1B,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAKE,aAAL,CAAmBgC,WAAnB,OAAqC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAzE,CAAJ,EAAyF;AACrF,YAAMC,KAAK,CAAC,0EAAD,CAAX;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIlB,EAAAA,qBAAqB,GAAG;AACpB,QAAI,CAAC,KAAKG,kBAAV,EAA8B;AAC1B,WAAKhC,OAAL,CAAagD,iBAAb,CAA+B,MAAM;AACjC,aAAKhB,kBAAL,GAA0BlE,UAAU,CAAC,MAAM;AACvC,gBAAMmF,YAAY,GAAG,KAAKhD,WAAL,CAAiB6B,aAAjB,CAA+BoB,aAA/B,CAA6C,eAA7C,CAArB;;AACA,gBAAMC,WAAW,GAAG,KAAKlD,WAAL,CAAiB6B,aAAjB,CAA+BoB,aAA/B,CAA6C,aAA7C,CAApB;;AACA,cAAID,YAAY,IAAIE,WAApB,EAAiC;AAC7B;AACA;AACA,gBAAIC,cAAc,GAAG,IAArB;;AACA,gBAAI,KAAKjD,SAAL,CAAekD,SAAf,IACAC,QAAQ,CAACC,aAAT,YAAkCC,WADlC,IAEAP,YAAY,CAACQ,QAAb,CAAsBH,QAAQ,CAACC,aAA/B,CAFJ,EAEmD;AAC/CH,cAAAA,cAAc,GAAGE,QAAQ,CAACC,aAA1B;AACH;;AACDN,YAAAA,YAAY,CAACS,eAAb,CAA6B,aAA7B;AACAP,YAAAA,WAAW,CAACQ,WAAZ,CAAwBV,YAAxB;AACAG,YAAAA,cAAc,EAAEQ,KAAhB;;AACA,iBAAKrD,WAAL,CAAiB7C,IAAjB;;AACA,iBAAK6C,WAAL,CAAiB5C,QAAjB;AACH;AACJ,SAlBmC,EAkBjC,KAAK0C,cAlB4B,CAApC;AAmBH,OApBD;AAqBH;AACJ;;AApLoD;;AAsLzDN,yBAAyB,CAACpB,IAA1B;AAAA,mBAA2HoB,yBAA3H,EAnOsG9F,EAmOtG,mBAAsKA,EAAE,CAAC4J,MAAzK,GAnOsG5J,EAmOtG,mBAA4LA,EAAE,CAAC6J,UAA/L,GAnOsG7J,EAmOtG,mBAAsNA,EAAE,CAAC8J,iBAAzN,GAnOsG9J,EAmOtG,mBAAuPkB,EAAE,CAAC6I,QAA1P,GAnOsG/J,EAmOtG,mBAA+Q8B,iBAA/Q;AAAA;;AACAgE,yBAAyB,CAACkE,IAA1B,kBApOsGhK,EAoOtG;AAAA,QAA+G8F,yBAA/G;AAAA;AAAA;AApOsG9F,MAAAA,EAoOtG,aAAiNN,eAAjN;AAAA;;AAAA;AAAA;;AApOsGM,MAAAA,EAoOtG,qBApOsGA,EAoOtG;AAAA;AAAA;AAAA,aApOsGA,EAoOtG;AAAA;;AACA;AAAA,qDArOsGA,EAqOtG,mBAAgG8F,yBAAhG,EAAuI,CAAC;AAC5HhB,IAAAA,IAAI,EAAExE;AADsH,GAAD,CAAvI,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAEwE,MAAAA,IAAI,EAAE9E,EAAE,CAAC4J;AAAX,KAAD,EAAsB;AAAE9E,MAAAA,IAAI,EAAE9E,EAAE,CAAC6J;AAAX,KAAtB,EAA+C;AAAE/E,MAAAA,IAAI,EAAE9E,EAAE,CAAC8J;AAAX,KAA/C,EAA+E;AAAEhF,MAAAA,IAAI,EAAE5D,EAAE,CAAC6I;AAAX,KAA/E,EAAsG;AAAEjF,MAAAA,IAAI,EAAEhD;AAAR,KAAtG,CAAP;AAA4I,GAFtL,EAEwM;AAAE8E,IAAAA,aAAa,EAAE,CAAC;AAC1M9B,MAAAA,IAAI,EAAEvE,SADoM;AAE1MwE,MAAAA,IAAI,EAAE,CAACrF,eAAD,EAAkB;AAAEuK,QAAAA,MAAM,EAAE;AAAV,OAAlB;AAFoM,KAAD;AAAjB,GAFxM;AAAA;AAMA;AACA;AACA;AACA;;;AACA,MAAMC,oBAAN,SAAmCpE,yBAAnC,CAA6D;AACzDe,EAAAA,oBAAoB,GAAG;AACnB,UAAMA,oBAAN;;AACA,QAAI,KAAKV,cAAL,CAAoB/D,kBAApB,KAA2C,QAA/C,EAAyD;AACrD,WAAK4D,WAAL,CAAiB6B,aAAjB,CAA+Ba,SAA/B,CAAyCC,GAAzC,CAA6C,sBAA7C;AACH;;AACD,QAAI,KAAKxC,cAAL,CAAoB9D,gBAApB,KAAyC,KAA7C,EAAoD;AAChD,WAAK2D,WAAL,CAAiB6B,aAAjB,CAA+Ba,SAA/B,CAAyCC,GAAzC,CAA6C,mBAA7C;AACH;AACJ;;AATwD;;AAW7DuB,oBAAoB,CAACxF,IAArB;AAAA;AAAA;AAAA,sFA1PsG1E,EA0PtG,uBAAsHkK,oBAAtH,SAAsHA,oBAAtH;AAAA;AAAA;;AACAA,oBAAoB,CAACvF,IAArB,kBA3PsG3E,EA2PtG;AAAA,QAA0GkK,oBAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AA3PsGlK,MAAAA,EA2PtG;AAAA,eAA0G,0BAA1G;AAAA;AAAA;;AAAA;AA3PsGA,MAAAA,EA2PtG;AAAA;AAAA;AAAA,aA3PsGA,EA2PtG;AAAA;AAAA;AAAA;AAAA;AAAA;AA3PsGA,MAAAA,EA2PwW,4BAA9c;AA3PsGA,MAAAA,EA2PsY,mFAA5e;AA3PsGA,MAAAA,EA2Pmb,eAAzhB;AA3PsGA,MAAAA,EA2P8iB,oBAAppB;AAAA;;AAAA;AA3PsGA,MAAAA,EA2PmjB,aAAzpB;AA3PsGA,MAAAA,EA2PmjB,uDAAzpB;AAAA;AAAA;AAAA,iBAAwoCR,IAAI,CAACE,eAA7oC;AAAA;AAAA;AAAA;AAAA,eAA+xC,CAACgG,qBAAqB,CAACC,aAAvB;AAA/xC;AAAA;;AACA;AAAA,qDA5PsG3F,EA4PtG,mBAAgGkK,oBAAhG,EAAkI,CAAC;AACvHpF,IAAAA,IAAI,EAAE5E,SADiH;AAEvH6E,IAAAA,IAAI,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,qBAAZ;AAAmCG,MAAAA,eAAe,EAAE/E,uBAAuB,CAAC+J,OAA5E;AAAqFlF,MAAAA,aAAa,EAAE9E,iBAAiB,CAAC+E,IAAtH;AAA4HkF,MAAAA,UAAU,EAAE,CAAC1E,qBAAqB,CAACC,aAAvB,CAAxI;AAA+KN,MAAAA,IAAI,EAAE;AAChL,iBAAS,yBADuK;AAEhL,oBAAY,iBAFoK;AAGhL,yBAAiB;AAH+J,OAArL;AAIIC,MAAAA,QAAQ,EAAE,yWAJd;AAIyXC,MAAAA,MAAM,EAAE,CAAC,6XAAD;AAJjY,KAAD;AAFiH,GAAD,CAAlI;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM8E,iBAAN,CAAwB;;AAExBA,iBAAiB,CAAC3F,IAAlB;AAAA,mBAAmH2F,iBAAnH;AAAA;;AACAA,iBAAiB,CAACC,IAAlB,kBA/QsGtK,EA+QtG;AAAA,QAAoHqK;AAApH;AACAA,iBAAiB,CAACE,IAAlB,kBAhRsGvK,EAgRtG;AAAA,YAAiJV,aAAjJ,EAAgKK,YAAhK,EAA8KI,YAA9K,EAA4LiB,eAA5L,EAA6MF,eAA7M,EAA8NA,eAA9N;AAAA;;AACA;AAAA,qDAjRsGd,EAiRtG,mBAAgGqK,iBAAhG,EAA+H,CAAC;AACpHvF,IAAAA,IAAI,EAAEtE,QAD8G;AAEpHuE,IAAAA,IAAI,EAAE,CAAC;AACCyF,MAAAA,OAAO,EAAE,CAAClL,aAAD,EAAgBK,YAAhB,EAA8BI,YAA9B,EAA4CiB,eAA5C,EAA6DF,eAA7D,CADV;AAEC2J,MAAAA,OAAO,EAAE,CAACP,oBAAD,EAAuBpJ,eAAvB,CAFV;AAGC4J,MAAAA,YAAY,EAAE,CAACR,oBAAD,EAAuB5F,cAAvB;AAHf,KAAD;AAF8G,GAAD,CAA/H;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMqG,6BAA6B,GAAG,IAAI1K,cAAJ,CAAmB,+BAAnB,EAAoD;AACtF2K,EAAAA,UAAU,EAAE,MAD0E;AAEtFC,EAAAA,OAAO,EAAEC;AAF6E,CAApD,CAAtC;AAIA;;AACA,SAASA,qCAAT,GAAiD;AAC7C,SAAO,IAAIhJ,iBAAJ,EAAP;AACH;;AACD,MAAMiJ,gBAAN,CAAuB;AACnBhJ,EAAAA,WAAW,CAACiJ,QAAD,EAAWlE,KAAX,EAAkBmE,SAAlB,EAA6BC,mBAA7B,EAAkDC,eAAlD,EAAmEC,cAAnE,EAAmF;AAC1F,SAAKJ,QAAL,GAAgBA,QAAhB;AACA,SAAKlE,KAAL,GAAaA,KAAb;AACA,SAAKmE,SAAL,GAAiBA,SAAjB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,uBAAL,GAA+B,IAA/B;AACH;AACD;;;AACsB,MAAlBC,kBAAkB,GAAG;AACrB,UAAMC,MAAM,GAAG,KAAKJ,eAApB;AACA,WAAOI,MAAM,GAAGA,MAAM,CAACD,kBAAV,GAA+B,KAAKD,uBAAjD;AACH;;AACqB,MAAlBC,kBAAkB,CAACE,KAAD,EAAQ;AAC1B,QAAI,KAAKL,eAAT,EAA0B;AACtB,WAAKA,eAAL,CAAqBG,kBAArB,GAA0CE,KAA1C;AACH,KAFD,MAGK;AACD,WAAKH,uBAAL,GAA+BG,KAA/B;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,iBAAiB,CAACC,SAAD,EAAYC,MAAZ,EAAoB;AACjC,WAAO,KAAKC,OAAL,CAAaF,SAAb,EAAwBC,MAAxB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,gBAAgB,CAACvG,QAAD,EAAWqG,MAAX,EAAmB;AAC/B,WAAO,KAAKC,OAAL,CAAatG,QAAb,EAAuBqG,MAAvB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,IAAI,CAACC,OAAD,EAAUvH,MAAM,GAAG,EAAnB,EAAuBmH,MAAvB,EAA+B;AAC/B,UAAMK,OAAO,GAAG,EAAE,GAAG,KAAKZ,cAAV;AAA0B,SAAGO;AAA7B,KAAhB,CAD+B,CAE/B;AACA;;AACAK,IAAAA,OAAO,CAAC7J,IAAR,GAAe;AAAE4J,MAAAA,OAAF;AAAWvH,MAAAA;AAAX,KAAf,CAJ+B,CAK/B;AACA;;AACA,QAAIwH,OAAO,CAAC/J,mBAAR,KAAgC8J,OAApC,EAA6C;AACzCC,MAAAA,OAAO,CAAC/J,mBAAR,GAA8BuD,SAA9B;AACH;;AACD,WAAO,KAAKiG,iBAAL,CAAuB,KAAKQ,uBAA5B,EAAqDD,OAArD,CAAP;AACH;AACD;AACJ;AACA;;;AACI7I,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKmI,kBAAT,EAA6B;AACzB,WAAKA,kBAAL,CAAwBnI,OAAxB;AACH;AACJ;;AACD6E,EAAAA,WAAW,GAAG;AACV;AACA,QAAI,KAAKqD,uBAAT,EAAkC;AAC9B,WAAKA,uBAAL,CAA6BlI,OAA7B;AACH;AACJ;AACD;AACJ;AACA;;;AACI+I,EAAAA,wBAAwB,CAACC,UAAD,EAAaR,MAAb,EAAqB;AACzC,UAAMS,YAAY,GAAGT,MAAM,IAAIA,MAAM,CAACU,gBAAjB,IAAqCV,MAAM,CAACU,gBAAP,CAAwBC,QAAlF;AACA,UAAMA,QAAQ,GAAG7L,QAAQ,CAAC8L,MAAT,CAAgB;AAC7BhB,MAAAA,MAAM,EAAEa,YAAY,IAAI,KAAKnB,SADA;AAE7BuB,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,OAAO,EAAE3K,iBAAX;AAA8B4K,QAAAA,QAAQ,EAAEf;AAAxC,OAAD;AAFkB,KAAhB,CAAjB;AAIA,UAAMgB,eAAe,GAAG,IAAI/M,eAAJ,CAAoB,KAAKgN,0BAAzB,EAAqDjB,MAAM,CAACU,gBAA5D,EAA8EC,QAA9E,CAAxB;AACA,UAAMO,YAAY,GAAGV,UAAU,CAACW,MAAX,CAAkBH,eAAlB,CAArB;AACAE,IAAAA,YAAY,CAACE,QAAb,CAAsB5G,cAAtB,GAAuCwF,MAAvC;AACA,WAAOkB,YAAY,CAACE,QAApB;AACH;AACD;AACJ;AACA;;;AACInB,EAAAA,OAAO,CAACoB,OAAD,EAAUC,UAAV,EAAsB;AACzB,UAAMtB,MAAM,GAAG,EAAE,GAAG,IAAI7J,iBAAJ,EAAL;AAA8B,SAAG,KAAKsJ,cAAtC;AAAsD,SAAG6B;AAAzD,KAAf;;AACA,UAAMd,UAAU,GAAG,KAAKe,cAAL,CAAoBvB,MAApB,CAAnB;;AACA,UAAMwB,SAAS,GAAG,KAAKjB,wBAAL,CAA8BC,UAA9B,EAA0CR,MAA1C,CAAlB;;AACA,UAAMpH,WAAW,GAAG,IAAI9B,cAAJ,CAAmB0K,SAAnB,EAA8BhB,UAA9B,CAApB;;AACA,QAAIa,OAAO,YAAYtM,WAAvB,EAAoC;AAChC,YAAM+F,MAAM,GAAG,IAAI5G,cAAJ,CAAmBmN,OAAnB,EAA4B,IAA5B,EAAkC;AAC7CI,QAAAA,SAAS,EAAEzB,MAAM,CAACxJ,IAD2B;AAE7CoC,QAAAA;AAF6C,OAAlC,CAAf;AAIAA,MAAAA,WAAW,CAACwI,QAAZ,GAAuBI,SAAS,CAACjG,oBAAV,CAA+BT,MAA/B,CAAvB;AACH,KAND,MAOK;AACD,YAAM6F,QAAQ,GAAG,KAAKe,eAAL,CAAqB1B,MAArB,EAA6BpH,WAA7B,CAAjB;;AACA,YAAMkC,MAAM,GAAG,IAAI7G,eAAJ,CAAoBoN,OAApB,EAA6BxH,SAA7B,EAAwC8G,QAAxC,CAAf;AACA,YAAMgB,UAAU,GAAGH,SAAS,CAAClG,qBAAV,CAAgCR,MAAhC,CAAnB,CAHC,CAID;;AACAlC,MAAAA,WAAW,CAACwI,QAAZ,GAAuBO,UAAU,CAACP,QAAlC;AACH,KAlBwB,CAmBzB;AACA;AACA;;;AACA,SAAK7B,mBAAL,CACKqC,OADL,CACa3L,WAAW,CAAC4L,eADzB,EAEKtF,IAFL,CAEU9G,SAAS,CAAC+K,UAAU,CAACsB,WAAX,EAAD,CAFnB,EAGKxK,SAHL,CAGe3B,KAAK,IAAI;AACpB6K,MAAAA,UAAU,CAACuB,cAAX,CAA0BhF,SAA1B,CAAoCiF,MAApC,CAA2C,KAAKC,eAAhD,EAAiEtM,KAAK,CAACuM,OAAvE;AACH,KALD;;AAMA,QAAIlC,MAAM,CAAC1J,mBAAX,EAAgC;AAC5B;AACAkL,MAAAA,SAAS,CAAC7G,WAAV,CAAsBrD,SAAtB,CAAgC,MAAM;AAClC,aAAK6D,KAAL,CAAWgH,QAAX,CAAoBnC,MAAM,CAAC1J,mBAA3B,EAAgD0J,MAAM,CAAC3J,UAAvD;AACH,OAFD;AAGH;;AACD,SAAK+L,gBAAL,CAAsBxJ,WAAtB,EAAmCoH,MAAnC;;AACA,SAAKL,kBAAL,GAA0B/G,WAA1B;AACA,WAAO,KAAK+G,kBAAZ;AACH;AACD;;;AACAyC,EAAAA,gBAAgB,CAACxJ,WAAD,EAAcoH,MAAd,EAAsB;AAClC;AACApH,IAAAA,WAAW,CAACL,cAAZ,GAA6BjB,SAA7B,CAAuC,MAAM;AACzC;AACA,UAAI,KAAKqI,kBAAL,IAA2B/G,WAA/B,EAA4C;AACxC,aAAK+G,kBAAL,GAA0B,IAA1B;AACH;;AACD,UAAIK,MAAM,CAAC1J,mBAAX,EAAgC;AAC5B,aAAK6E,KAAL,CAAWkH,KAAX;AACH;AACJ,KARD;;AASA,QAAI,KAAK1C,kBAAT,EAA6B;AACzB;AACA;AACA,WAAKA,kBAAL,CAAwBpH,cAAxB,GAAyCjB,SAAzC,CAAmD,MAAM;AACrDsB,QAAAA,WAAW,CAAC7B,iBAAZ,CAA8BgF,KAA9B;AACH,OAFD;;AAGA,WAAK4D,kBAAL,CAAwBnI,OAAxB;AACH,KAPD,MAQK;AACD;AACAoB,MAAAA,WAAW,CAAC7B,iBAAZ,CAA8BgF,KAA9B;AACH,KAtBiC,CAuBlC;;;AACA,QAAIiE,MAAM,CAACzJ,QAAP,IAAmByJ,MAAM,CAACzJ,QAAP,GAAkB,CAAzC,EAA4C;AACxCqC,MAAAA,WAAW,CAACJ,WAAZ,GAA0BlB,SAA1B,CAAoC,MAAMsB,WAAW,CAACX,aAAZ,CAA0B+H,MAAM,CAACzJ,QAAjC,CAA1C;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIgL,EAAAA,cAAc,CAACvB,MAAD,EAAS;AACnB,UAAMsC,aAAa,GAAG,IAAI1O,aAAJ,EAAtB;AACA0O,IAAAA,aAAa,CAACC,SAAd,GAA0BvC,MAAM,CAACuC,SAAjC;;AACA,QAAIC,gBAAgB,GAAG,KAAKnD,QAAL,CAAcoD,QAAd,GAAyBC,MAAzB,EAAvB,CAHmB,CAInB;;;AACA,UAAMC,KAAK,GAAG3C,MAAM,CAACuC,SAAP,KAAqB,KAAnC;AACA,UAAMK,MAAM,GAAG5C,MAAM,CAACvJ,kBAAP,KAA8B,MAA9B,IACVuJ,MAAM,CAACvJ,kBAAP,KAA8B,OAA9B,IAAyC,CAACkM,KADhC,IAEV3C,MAAM,CAACvJ,kBAAP,KAA8B,KAA9B,IAAuCkM,KAF5C;AAGA,UAAME,OAAO,GAAG,CAACD,MAAD,IAAW5C,MAAM,CAACvJ,kBAAP,KAA8B,QAAzD;;AACA,QAAImM,MAAJ,EAAY;AACRJ,MAAAA,gBAAgB,CAACM,IAAjB,CAAsB,GAAtB;AACH,KAFD,MAGK,IAAID,OAAJ,EAAa;AACdL,MAAAA,gBAAgB,CAACO,KAAjB,CAAuB,GAAvB;AACH,KAFI,MAGA;AACDP,MAAAA,gBAAgB,CAACQ,kBAAjB;AACH,KAlBkB,CAmBnB;;;AACA,QAAIhD,MAAM,CAACtJ,gBAAP,KAA4B,KAAhC,EAAuC;AACnC8L,MAAAA,gBAAgB,CAACS,GAAjB,CAAqB,GAArB;AACH,KAFD,MAGK;AACDT,MAAAA,gBAAgB,CAACU,MAAjB,CAAwB,GAAxB;AACH;;AACDZ,IAAAA,aAAa,CAACE,gBAAd,GAAiCA,gBAAjC;AACA,WAAO,KAAKnD,QAAL,CAAcuB,MAAd,CAAqB0B,aAArB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIZ,EAAAA,eAAe,CAAC1B,MAAD,EAASpH,WAAT,EAAsB;AACjC,UAAM6H,YAAY,GAAGT,MAAM,IAAIA,MAAM,CAACU,gBAAjB,IAAqCV,MAAM,CAACU,gBAAP,CAAwBC,QAAlF;AACA,WAAO7L,QAAQ,CAAC8L,MAAT,CAAgB;AACnBhB,MAAAA,MAAM,EAAEa,YAAY,IAAI,KAAKnB,SADV;AAEnBuB,MAAAA,SAAS,EAAE,CACP;AAAEC,QAAAA,OAAO,EAAEhK,cAAX;AAA2BiK,QAAAA,QAAQ,EAAEnI;AAArC,OADO,EAEP;AAAEkI,QAAAA,OAAO,EAAE5K,kBAAX;AAA+B6K,QAAAA,QAAQ,EAAEf,MAAM,CAACxJ;AAAhD,OAFO;AAFQ,KAAhB,CAAP;AAOH;;AAnNkB;;AAqNvB4I,gBAAgB,CAACrG,IAAjB;AAAA,mBAAkHqG,gBAAlH,EA/fsG/K,EA+ftG,UAAoJX,IAAI,CAACyP,OAAzJ,GA/fsG9O,EA+ftG,UAA6K0B,IAAI,CAACqN,aAAlL,GA/fsG/O,EA+ftG,UAA4MA,EAAE,CAACS,QAA/M,GA/fsGT,EA+ftG,UAAoO2B,IAAI,CAACqN,kBAAzO,GA/fsGhP,EA+ftG,UAAwQ+K,gBAAxQ,OA/fsG/K,EA+ftG,UAAqU2K,6BAArU;AAAA;;AACAI,gBAAgB,CAACkE,KAAjB,kBAhgBsGjP,EAggBtG;AAAA,SAAsH+K,gBAAtH;AAAA,WAAsHA,gBAAtH;AAAA;;AACA;AAAA,qDAjgBsG/K,EAigBtG,mBAAgG+K,gBAAhG,EAA8H,CAAC;AACnHjG,IAAAA,IAAI,EAAEnE;AAD6G,GAAD,CAA9H,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAEmE,MAAAA,IAAI,EAAEzF,IAAI,CAACyP;AAAb,KAAD,EAAyB;AAAEhK,MAAAA,IAAI,EAAEpD,IAAI,CAACqN;AAAb,KAAzB,EAAuD;AAAEjK,MAAAA,IAAI,EAAE9E,EAAE,CAACS;AAAX,KAAvD,EAA8E;AAAEqE,MAAAA,IAAI,EAAEnD,IAAI,CAACqN;AAAb,KAA9E,EAAiH;AAAElK,MAAAA,IAAI,EAAEiG,gBAAR;AAA0BtF,MAAAA,UAAU,EAAE,CAAC;AACrLX,QAAAA,IAAI,EAAElE;AAD+K,OAAD,EAErL;AACCkE,QAAAA,IAAI,EAAEjE;AADP,OAFqL;AAAtC,KAAjH,EAI3B;AAAEiE,MAAAA,IAAI,EAAEhD,iBAAR;AAA2B2D,MAAAA,UAAU,EAAE,CAAC;AAC1CX,QAAAA,IAAI,EAAEzE,MADoC;AAE1C0E,QAAAA,IAAI,EAAE,CAAC4F,6BAAD;AAFoC,OAAD;AAAvC,KAJ2B,CAAP;AAOlB,GATxB;AAAA;AAUA;AACA;AACA;;;AACA,MAAMuE,WAAN,SAA0BnE,gBAA1B,CAA2C;AACvChJ,EAAAA,WAAW,CAACoN,OAAD,EAAUC,IAAV,EAAgB9C,QAAhB,EAA0B+C,kBAA1B,EAA8CC,cAA9C,EAA8DC,aAA9D,EAA6E;AACpF,UAAMJ,OAAN,EAAeC,IAAf,EAAqB9C,QAArB,EAA+B+C,kBAA/B,EAAmDC,cAAnD,EAAmEC,aAAnE;AACA,SAAKtD,uBAAL,GAA+B3H,cAA/B;AACA,SAAKsI,0BAAL,GAAkC1C,oBAAlC;AACA,SAAK0D,eAAL,GAAuB,uBAAvB;AACH;;AANsC;;AAQ3CsB,WAAW,CAACxK,IAAZ;AAAA,mBAA6GwK,WAA7G,EAthBsGlP,EAshBtG,UAA0IX,IAAI,CAACyP,OAA/I,GAthBsG9O,EAshBtG,UAAmK0B,IAAI,CAACqN,aAAxK,GAthBsG/O,EAshBtG,UAAkMA,EAAE,CAACS,QAArM,GAthBsGT,EAshBtG,UAA0N2B,IAAI,CAACqN,kBAA/N,GAthBsGhP,EAshBtG,UAA8PkP,WAA9P,OAthBsGlP,EAshBtG,UAAsT2K,6BAAtT;AAAA;;AACAuE,WAAW,CAACD,KAAZ,kBAvhBsGjP,EAuhBtG;AAAA,SAAiHkP,WAAjH;AAAA,WAAiHA,WAAjH;AAAA,cAA0I7E;AAA1I;;AACA;AAAA,qDAxhBsGrK,EAwhBtG,mBAAgGkP,WAAhG,EAAyH,CAAC;AAC9GpK,IAAAA,IAAI,EAAEnE,UADwG;AAE9GoE,IAAAA,IAAI,EAAE,CAAC;AAAE6F,MAAAA,UAAU,EAAEP;AAAd,KAAD;AAFwG,GAAD,CAAzH,EAG4B,YAAY;AAAE,WAAO,CAAC;AAAEvF,MAAAA,IAAI,EAAEzF,IAAI,CAACyP;AAAb,KAAD,EAAyB;AAAEhK,MAAAA,IAAI,EAAEpD,IAAI,CAACqN;AAAb,KAAzB,EAAuD;AAAEjK,MAAAA,IAAI,EAAE9E,EAAE,CAACS;AAAX,KAAvD,EAA8E;AAAEqE,MAAAA,IAAI,EAAEnD,IAAI,CAACqN;AAAb,KAA9E,EAAiH;AAAElK,MAAAA,IAAI,EAAEoK,WAAR;AAAqBzJ,MAAAA,UAAU,EAAE,CAAC;AAChLX,QAAAA,IAAI,EAAElE;AAD0K,OAAD,EAEhL;AACCkE,QAAAA,IAAI,EAAEjE;AADP,OAFgL;AAAjC,KAAjH,EAI3B;AAAEiE,MAAAA,IAAI,EAAEhD,iBAAR;AAA2B2D,MAAAA,UAAU,EAAE,CAAC;AAC1CX,QAAAA,IAAI,EAAEzE,MADoC;AAE1C0E,QAAAA,IAAI,EAAE,CAAC4F,6BAAD;AAFoC,OAAD;AAAvC,KAJ2B,CAAP;AAOlB,GAVxB;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS9I,kBAAT,EAA6B8I,6BAA7B,EAA4DG,qCAA5D,EAAmGoE,WAAnG,EAAgHpN,iBAAhH,EAAmIoI,oBAAnI,EAAyJG,iBAAzJ,EAA4K5H,cAA5K,EAA4L6B,cAA5L,EAA4MyG,gBAA5M,EAA8NjF,yBAA9N,EAAyPJ,qBAAzP","sourcesContent":["import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Directive, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\n_MatSnackBarContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSnackBarContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0-rc.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"]},"metadata":{},"sourceType":"module"}