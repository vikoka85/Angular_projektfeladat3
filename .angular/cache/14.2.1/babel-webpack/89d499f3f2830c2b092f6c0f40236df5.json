{"ast":null,"code":"import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n  const {\n    connector = () => new Subject(),\n    resetOnError = true,\n    resetOnComplete = true,\n    resetOnRefCountZero = true\n  } = options;\n  return wrapperSource => {\n    let connection;\n    let resetConnection;\n    let subject;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n\n    const cancelReset = () => {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = undefined;\n    };\n\n    const reset = () => {\n      cancelReset();\n      connection = subject = undefined;\n      hasCompleted = hasErrored = false;\n    };\n\n    const resetAndUnsubscribe = () => {\n      const conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n\n    return operate((source, subscriber) => {\n      refCount++;\n\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      const dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n      subscriber.add(() => {\n        refCount--;\n\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n\n      if (!connection && refCount > 0) {\n        connection = new SafeSubscriber({\n          next: value => dest.next(value),\n          error: err => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          }\n        });\n        innerFrom(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset(reset, on, ...args) {\n  if (on === true) {\n    reset();\n    return;\n  }\n\n  if (on === false) {\n    return;\n  }\n\n  const onSubscriber = new SafeSubscriber({\n    next: () => {\n      onSubscriber.unsubscribe();\n      reset();\n    }\n  });\n  return on(...args).subscribe(onSubscriber);\n}","map":{"version":3,"sources":["D:/HTML/_Angular/projektfeladat/4/E-commerce-main/node_modules/rxjs/dist/esm/internal/operators/share.js"],"names":["innerFrom","Subject","SafeSubscriber","operate","share","options","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","refCount","hasCompleted","hasErrored","cancelReset","unsubscribe","undefined","reset","resetAndUnsubscribe","conn","source","subscriber","dest","add","handleReset","subscribe","next","value","error","err","complete","on","args","onSubscriber"],"mappings":"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","sourcesContent":["import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return on(...args).subscribe(onSubscriber);\n}\n"]},"metadata":{},"sourceType":"module"}